package ui

// C:\_Projects_Go\AcousticMerge\internal\ui\ui.go
// Package: ui
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –¶–≤–µ—Ç–Ω–æ–π UI, help, –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∞–≤—Ç–æ–ø—É—Ç–∏ D:\‚ÜíC:\, 2 –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (PASS1/PASS2).

import (
	"flag"
	"fmt"
	"math"
	"os"
	"path/filepath"
	"strings"
)

const Version = "v0.3.0"

type OrderBy string

const (
	OrderByName  OrderBy = "name"
	OrderByMTime OrderBy = "mtime"
)

type Config struct {
	Src           string
	Out           string
	GainPct       float64
	Order         OrderBy
	StrictFormat  bool
	Resample      int
	NormalizeDB   float64
	DoNormalize   bool
	CrossfadeMS   int
	DryRun        bool
	BarWidth      int
	NoColor       bool
	NoEmoji       bool
	MergeNow      bool
	ShowOnlyHelp  bool
}

// ---------- –¶–≤–µ—Ç–∞/—ç–º–æ–¥–∑–∏/–ª–æ–≥–≥–µ—Ä—ã ----------

var (
	cReset  = "\x1b[0m"
	cBold   = "\x1b[1m"
	cCyan   = "\x1b[36m"
	cGreen  = "\x1b[32m"
	cYellow = "\x1b[33m"
	cGray   = "\x1b[90m"
)

func col(noColor bool, s, color string) string {
	if noColor {
		return s
	}
	return color + s + cReset
}

func emoji(noEmoji bool, s string) string {
	if noEmoji {
		return ""
	}
	return s + " "
}

type UIAPI struct {
	LogInfo  func(format string, a ...any)
	LogOK    func(format string, a ...any)
	LogWarn  func(format string, a ...any)
	LogErr   func(format string, a ...any)
	PrintKV  func(k, v string)
	PrintBar func(label string, cur, total int)
	EndBar   func()
	Banner   func(title string)
}

var API UIAPI // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ ParseArgsAndSetup

// ---------- Help/–±–∞–Ω–Ω–µ—Ä ----------

func autodetectBaseDrive() string {
	if _, err := os.Stat(`D:\`); err == nil {
		return `D:\`
	}
	return `C:\`
}

func defaultPaths() (src, out string) {
	base := autodetectBaseDrive()
	src = filepath.Join(base, "DataSound_Temp", "AcousticMerge", "Raw")
	out = filepath.Join(base, "DataSound_Temp", "AcousticMerge", "Result", "merged.wav")
	return
}

func showHelp(noColor bool) {
	base := autodetectBaseDrive()
	defSrc := filepath.Join(base, "DataSound_Temp", "AcousticMerge", "Raw")
	defOut := filepath.Join(base, "DataSound_Temp", "AcousticMerge", "Result", "merged.wav")

	title := "AcousticMerge ‚Äî offline WAV merger (AcousticLog companion tool)"
	sep := strings.Repeat("‚îÄ", len(title)+2)
	fmt.Printf("%s\n%s %s\n%s\n",
		col(noColor, sep, cCyan),
		col(noColor, "‚ñ∂", cCyan), col(noColor, title, cBold),
		col(noColor, sep, cCyan),
	)

	fmt.Println(col(noColor, "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:", cCyan))
	fmt.Println("  AcousticMerge /merge                 ‚Üí —Å–∫–ª–µ–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–∑ Raw –≤ Result)")
	fmt.Println("  AcousticMerge /merge --gain-pct 150 ‚Üí —Å–∫–ª–µ–∏—Ç—å –∏ —É—Å–∏–ª–∏—Ç—å √ó1.5")
	fmt.Println()

	fmt.Println(col(noColor, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", cCyan))
	fmt.Printf("  --src <–ø—É—Ç—å>         –ü–∞–ø–∫–∞ —Å WAV-—Ñ–∞–π–ª–∞–º–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–±–æ—Ä). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s\n", defSrc)
	fmt.Printf("  --out <–ø—É—Ç—å>         –ò—Ç–æ–≥–æ–≤—ã–π WAV. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s\n", defOut)
	fmt.Println("  --gain-pct <—á–∏—Å–ª–æ>   –£—Å–∏–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (100=–∫–∞–∫ –µ—Å—Ç—å, 150=√ó1.5, 200=√ó2.0)")
	fmt.Println("  --normalize <–¥–ë>     –ü–∏–∫-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ —É—Ä–æ–≤–Ω—è (–¥–ëFS), –Ω–∞–ø—Ä. -1.0")
	fmt.Println("  --order name|mtime   –ü–æ—Ä—è–¥–æ–∫: –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
	fmt.Println("  --crossfade-ms <–º—Å>  –õ—ë–≥–∫–∏–π —Ñ–µ–π–¥ –Ω–∞ —Å—Ç—ã–∫–∞—Ö (0=–≤—ã–∫–ª)")
	fmt.Println("  --dry-run            –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞)")
	fmt.Println("  --bar-width <N>      –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (80 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
	fmt.Println("  --no-color           –û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç")
	fmt.Println("  --no-emoji           –û—Ç–∫–ª—é—á–∏—Ç—å —ç–º–æ–¥–∑–∏")
	fmt.Println("  --merge              –ê–ª–∏–∞—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —Å –ø—É—Ç—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	fmt.Println("  --help, /?, -?       –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏ –≤—ã–π—Ç–∏")
	fmt.Println()

	fmt.Println(col(noColor, "–ü—Ä–∏–º–µ—Ä—ã:", cCyan))
	fmt.Println("  AcousticMerge                       ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É (–ø—É—Å—Ç–æ–π –∑–∞–ø—É—Å–∫)")
	fmt.Println("  AcousticMerge /merge                ‚Üí –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—É—Ç—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	fmt.Println("  AcousticMerge /merge --gain-pct 120 ‚Üí —É—Å–∏–ª–µ–Ω–∏–µ √ó1.2")
	fmt.Println("  AcousticMerge --order mtime /merge  ‚Üí —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ + —Å–∫–ª–µ–π–∫–∞")
	fmt.Println("  AcousticMerge --dry-run --src X     ‚Üí —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –ø–æ–∫–∞–∂–µ—Ç —Å–≤–æ–¥–∫—É")
	fmt.Println()

	fmt.Println(col(noColor, "üìÇ –ü—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", cCyan))
	fmt.Println("  ‚Ä¢ –ï—Å–ª–∏ –¥–∏—Å–∫ D: –Ω–∞–π–¥–µ–Ω ‚Üí D:\\DataSound_Temp\\AcousticMerge\\Raw / Result")
	fmt.Println("  ‚Ä¢ –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è  ‚Üí C:\\DataSound_Temp\\AcousticMerge\\Raw / Result")
	fmt.Println("  ‚Ä¢ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
	fmt.Println()
	fmt.Println(col(noColor, "(C) Andrey Koval, 2025. AcousticMerge ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ AcousticLog.", cGray))
}

// ---------- –ü–∞—Ä—Å–∏–Ω–≥/–∞–ª–∏–∞—Å—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ UI ----------

func ParseArgsAndSetup() (*Config, bool) {
	cfg := &Config{}

	mergeNow := false
	showHelpOnly := false
	cleanArgs := make([]string, 0, len(os.Args)-1)
	for _, a := range os.Args[1:] {
		switch {
		case a == "/?" || a == "-?" || strings.EqualFold(a, "--help"):
			showHelpOnly = true
		case strings.EqualFold(a, "/merge") || strings.EqualFold(a, "--merge"):
			mergeNow = true
		default:
			cleanArgs = append(cleanArgs, a)
		}
	}

	defSrc, defOut := defaultPaths()

	var (
		flagSrc         string
		flagOut         string
		flagGainPct     float64
		flagOrder       string
		flagStrict      bool
		flagResample    int
		flagNormalizeDB float64
		flagCrossfadeMS int
		flagDryRun      bool
		flagNoColor     bool
		flagBarW        int
		flagNoEmoji     bool
	)

	flag.StringVar(&flagSrc, "src", defSrc, "–ü–∞–ø–∫–∞ —Å WAV-—Ñ–∞–π–ª–∞–º–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–±–æ—Ä)")
	flag.StringVar(&flagOut, "out", defOut, "–ü—É—Ç—å –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É —Ñ–∞–π–ª—É (–µ—Å–ª–∏ –∑–∞–Ω—è—Ç ‚Äî merged_1.wav –∏ —Ç.–¥.)")
	flag.Float64Var(&flagGainPct, "gain-pct", 100, "–£—Å–∏–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö: 100=–∫–∞–∫ –µ—Å—Ç—å, 150=√ó1.5, 200=√ó2.0")
	flag.StringVar(&flagOrder, "order", string(OrderByName), "–ü–æ—Ä—è–¥–æ–∫: name|mtime")
	flag.BoolVar(&flagStrict, "strict-format", true, "–¢—Ä–µ–±–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (PCM16/SR/–∫–∞–Ω–∞–ª—ã). –ò–Ω–∞—á–µ –æ—à–∏–±–∫–∞")
	flag.IntVar(&flagResample, "resample", 0, "–ü—Ä–∏–≤–µ—Å—Ç–∏ sample rate –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
	flag.Float64Var(&flagNormalizeDB, "normalize", math.NaN(), "–ü–∏–∫-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ —É—Ä–æ–≤–Ω—è (–¥–ëFS), –Ω–∞–ø—Ä. -1.0")
	flag.IntVar(&flagCrossfadeMS, "crossfade-ms", 0, "–ö—Ä–æ—Å—Å—Ñ–µ–π–¥ –Ω–∞ —Å—Ç—ã–∫–∞—Ö (–º—Å). 0 = –±–µ–∑ –∫—Ä–æ—Å—Å—Ñ–µ–π–¥–∞")
	flag.BoolVar(&flagDryRun, "dry-run", false, "–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É (–±–µ–∑ –∑–∞–ø–∏—Å–∏)")

	flag.BoolVar(&flagNoColor, "no-color", false, "–û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥")
	flag.IntVar(&flagBarW, "bar-width", 80, "–®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (—Å–∏–º–≤–æ–ª–æ–≤)")
	flag.BoolVar(&flagNoEmoji, "no-emoji", false, "–û—Ç–∫–ª—é—á–∏—Ç—å —ç–º–æ–¥–∑–∏")

	if err := flag.CommandLine.Parse(cleanArgs); err != nil {
		fmt.Println(err)
		os.Exit(2)
	}

	// Help –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏ –≤—ã–π—Ç–∏
	if showHelpOnly || (!mergeNow && len(cleanArgs) == 0) {
		showHelp(flagNoColor)
		return &Config{ShowOnlyHelp: true}, true
	}

	// –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
	cfg.Src = flagSrc
	cfg.Out = flagOut
	cfg.GainPct = flagGainPct
	cfg.Order = OrderBy(strings.ToLower(flagOrder))
	cfg.StrictFormat = flagStrict
	cfg.Resample = flagResample
	cfg.NormalizeDB = flagNormalizeDB
	cfg.DoNormalize = !math.IsNaN(flagNormalizeDB)
	cfg.CrossfadeMS = flagCrossfadeMS
	cfg.DryRun = flagDryRun
	cfg.BarWidth = flagBarW
	cfg.NoColor = flagNoColor
	cfg.NoEmoji = flagNoEmoji
	cfg.MergeNow = mergeNow

	// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å UI
	API = makeUI(flagNoColor, flagNoEmoji, flagBarW)
	API.Banner("AcousticMerge")

	return cfg, false
}

func makeUI(noColor, noEmoji bool, barW int) UIAPI {
	logInfo := func(format string, a ...any) {
		fmt.Printf("%s%s\n", emoji(noEmoji, "‚ÑπÔ∏è"), fmt.Sprintf(format, a...))
	}
	logOK := func(format string, a ...any) {
		fmt.Printf("%s%s\n", emoji(noEmoji, "‚úÖ"), col(noColor, fmt.Sprintf(format, a...), cGreen))
	}
	logWarn := func(format string, a ...any) {
		fmt.Printf("%s%s\n", emoji(noEmoji, "‚ö†Ô∏è"), col(noColor, fmt.Sprintf(format, a...), cYellow))
	}
	logErr := func(format string, a ...any) {
		fmt.Printf("%s%s\n", emoji(noEmoji, "üõë"), fmt.Sprintf(format, a...))
	}
	printKV := func(k, v string) {
		const pad = 12
		if len(k) < pad { k = k + strings.Repeat(" ", pad-len(k)) }
		fmt.Printf("   %s %s\n", col(noColor, k, cGray), v)
	}
	printBar := func(label string, cur, total int) {
		if total <= 0 { return }
		if barW < 10 { barW = 10 }
		percent := float64(cur) / float64(total)
		if percent < 0 { percent = 0 }
		if percent > 1 { percent = 1 }
		width := barW
		fill := int(math.Round(percent * float64(width)))
		if fill > width { fill = width }

		full := "‚ñà"
		empty := "‚ñë"
		green := cGreen
		reset := cReset
		if noColor { green = ""; reset = "" }

		bar := strings.Repeat(full, fill) + strings.Repeat(empty, width-fill)
		if !noColor && fill > 0 {
			bar = green + strings.Repeat(full, fill) + reset + strings.Repeat(empty, width-fill)
		}
		prefix := "üü© "
		if noEmoji { prefix = "" }
		fmt.Printf("\r%s%-12s [%s] %6.2f%% (%d/%d)", prefix, label, bar, percent*100.0, cur, total)
	}
	endBar := func() { fmt.Print("\n") }
	banner := func(title string) {
		sep := strings.Repeat("‚îÄ", len(title)+2)
		fmt.Printf("%s\n%s %s\n%s\n",
			col(noColor, sep, cCyan),
			col(noColor, "‚ñ∂", cCyan), col(noColor, title, cBold),
			col(noColor, sep, cCyan),
		)
	}

	return UIAPI{
		LogInfo: logInfo, LogOK: logOK, LogWarn: logWarn, LogErr: logErr,
		PrintKV: printKV, PrintBar: printBar, EndBar: endBar, Banner: banner,
	}
}
